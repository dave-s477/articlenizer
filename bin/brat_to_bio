#!/usr/bin/env python

import os
import argparse

from pathlib import Path

from articlenizer import formatting
from articlenizer.util import str2bool

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description = "Transform BRAT annotation to BIO format.")
    parser.add_argument("--in-path", required=True, help="Path to input dir.")
    parser.add_argument("--out-path", required=True, help="Path to output folder (will be created if it does not exist).")
    parser.add_argument("--ncores", default=None, help="Number of cores for parallel execution. Single core is used if not provided.")
    parser.add_argument("--process-unicode", default=True, type=str2bool, help="Replace/Adjust unicode characters")
    parser.add_argument("--replace-math", default=True, type=str2bool, help="Replace math equations with a fixed token")   
    parser.add_argument("--correct", default=True, type=str2bool, help="Correct errors in the text.")
    parser.add_argument("--corr-citations", default=True, type=str2bool, help="Correct citation errors.")
    parser.add_argument("--keep-paragraphs", default=True, type=str2bool, help="Keep newlines indicating paragraph structure.")
    args = parser.parse_args()

    args.in_path = args.in_path.rstrip('/')
    args.out_path = args.out_path.rstrip('/')

    if not os.path.isdir(args.in_path):
        raise(RuntimeError("Input path does not exist"))
    if not os.path.isdir(args.out_path):
        os.mkdir(args.out_path)

    print("Loading files")
    all_txt_files = list(Path(args.in_path).rglob('*.txt'))
    all_ann_files = list(Path(args.in_path).rglob('*.ann'))
    plain_txt_names = set([p.with_suffix('') for p in all_txt_files])
    plain_ann_names = set([p.with_suffix('') for p in all_ann_files])
    only_txt_names = plain_txt_names - plain_ann_names
    only_ann_names = plain_ann_names - plain_txt_names
    if only_txt_names:
        print(RuntimeWarning("The following text files have no annotation file: {}".format([str(p) for p in only_txt_names])))
    if only_ann_names:
        print(RuntimeWarning("The following annotation files have no text file: {}".format([str(p) for p in only_ann_names])))

    all_files = plain_txt_names & plain_ann_names
    all_files = [{'txt': Path(str(p) + '.txt'), 'ann': Path(str(p) + '.ann'), 'out': Path(str(p).replace(args.in_path, args.out_path))} for p in all_files]

    print("Setting up output paths")
    subpaths = set([str(p['out']).rsplit('/', 1)[0] for p in all_files])
    for p in subpaths:
        if not os.path.isdir(p):
            os.makedirs(p)

    if args.ncores is None:
        print("Transforming {} articles on a single core".format(len(all_files)))
        formatting.article_list_brat_to_bio(all_files, args.process_unicode, args.replace_math, args.correct, args.corr_citations, args.keep_paragraphs)
    else:
        n_cores = int(args.ncores)
        print("Transforming {} articles on {} cores".format(len(all_files), n_cores))
        formatting.brat_to_bio_parallel_wrapper(all_files, n_cores, args.process_unicode, args.replace_math, args.correct, args.corr_citations, args.keep_paragraphs)
 